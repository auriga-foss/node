use trusted._

use EDL node.Node
use EDL kl.VfsNet
use EDL kl.VfsRamFs
use EDL kl.VfsSdCardFs
use EDL env.Env
use EDL kl.drivers.RAMDisk
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO
use EDL kl.drivers.UART
use EDL kl.rump.Dhcpcd
use EDL klog.KlogEntity
use EDL klog_storage.KlogStorageEntity

/*
  Simplest audit rule for debugging

  Usage: include profile to rule body

  request src=EntityName {
    audit trace
    grant()
  }

  makes Klog print any request from EntityName
  Can be used in any rules, not only `request`
*/
audit profile trace = {
    0: {
        base: { kss: [ "denied", "granted" ] },
    },
}


/* Return of errors is allowed */
error
{
    grant()
}

request src=klog.KlogEntity, dst=kl.core.Core { grant() }

response src=kl.core.Core, dst=klog.KlogEntity { grant () }

request src=klog_storage.KlogStorageEntity, dst=kl.core.Core { grant() }

response src=kl.core.Core, dst=klog_storage.KlogStorageEntity { grant () }


request src=klog.KlogEntity, dst=klog_storage.KlogStorageEntity { grant() }

response src=klog_storage.KlogStorageEntity, dst=klog.KlogEntity { grant () }

/* UART */
execute src=Einit, dst=kl.drivers.UART
{
    grant()
}

request src=kl.drivers.UART, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.drivers.UART
{
    grant()
}

request src=env.Env, dst=kl.drivers.UART
{
    grant()
}

response src=kl.drivers.UART, dst=env.Env
{
    grant()
}

/* GPIO */
execute src=Einit, dst=kl.drivers.GPIO
{
    grant()
}


/**
 * This instruction enables to start up system entities by KOS kernel.
 */
execute src=kl.core.Core, dst=kl.core.Core
{
    grant()
}

request src=kl.drivers.GPIO, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.drivers.GPIO
{
    grant()
}

/**
 * This instruction enables to start up and initialize non-platform entities.
 */
execute src=Einit
{
    grant()
}


/**
 * This instruction enables to start up and initialize entities.
 */


execute src=Einit, dst=kl.drivers.RAMDisk
{
    grant()
}

execute src=Einit, dst=node.Node
{
    grant()
}

execute src=Einit, dst=kl.VfsNet
{
    grant()
}

execute src=Einit, dst=kl.VfsRamFs
{
    grant()
}

execute src=Einit, dst=env.Env
{
    grant()
}


/**
 * This code enables to send requests from entities to KOS kernel and get
 * responses. It makes able to use system calls by entities.
 */
request src = kl.rump.Dhcpcd, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.rump.Dhcpcd
{
    grant()
}

request src = kl.rump.Dhcpcd, dst = kl.VfsNet
{
    grant()
}

request src = kl.rump.Dhcpcd, dst = kl.VfsRamFs
{
    grant()
}

request src = kl.rump.Dhcpcd, dst = kl.VfsSdCardFs
{
    grant()
}

response src = kl.VfsNet, dst = kl.rump.Dhcpcd
{
    grant()
}

response src = kl.VfsRamFs, dst = kl.rump.Dhcpcd
{
    grant()
}

response src = kl.VfsSdCardFs, dst = kl.rump.Dhcpcd
{
    grant()
}

request src=kl.VfsNet, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.VfsNet
{
    grant()
}

request src=kl.VfsRamFs, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.VfsRamFs
{
    grant()
}

request src=env.Env, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=env.Env
{
    grant()
}

request src=node.Node, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=node.Node
{
    grant()
}

request src=node.Node, dst=kl.VfsNet
{
    grant()
}

request src=node.Node, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.TlsEntity, dst=node.Node
{
    grant()
}

request src=node.Node, dst=kl.TlsEntity
{
    grant()
}

response src=kl.VfsNet, dst=node.Node
{
    grant()
}

response src=kl.VfsRamFs, dst=node.Node
{
    grant()
}

response src=node.Node, dst=kl.TlsEntity
{
    grant()
}

response src=kl.TlsEntity, dst=node.Node
{
    grant()
}

request src=node.Node, dst=env.Env
{
    grant()
}

response src=env.Env, dst=node.Node
{
    grant()
}

/**
 * This code enables to send requests from RAMDisk entity to KOS kernel
 * and get responses.
 */
request src=kl.drivers.RAMDisk, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.drivers.RAMDisk
{
    grant()
}

security src=kl.drivers.RAMDisk, method=Register
{
    grant()
}

/**
 * This code enables to send requests from VfsRamFs entity to RAMDisk entity
 * and get responses.
 */
request src=kl.VfsNet, dst=kl.drivers.RAMDisk
{
    grant()
}

response src=kl.drivers.RAMDisk, dst=kl.VfsNet
{
    grant()
}

request src=kl.VfsRamFs, dst=kl.drivers.RAMDisk
{
    grant()
}

response src=kl.drivers.RAMDisk, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.drivers.BSP, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.drivers.BSP
{
    grant()
}

request src=kl.TlsEntity, dst=kl.VfsNet
{
    grant()
}

request src=kl.VfsNet, dst=kl.TlsEntity
{
    grant()
}

response src=kl.VfsNet, dst=kl.TlsEntity
{
    grant()
}

response src=kl.TlsEntity, dst=kl.VfsNet
{
    grant()
}

use EDL kl.VfsRamFs
use EDL kl.drivers.RAMDisk

request src=node.Node, dst=kl.VfsRamFs
{
    grant()
}

response src=kl.VfsRamFs, dst=node.Node
{
    grant()
}

execute src=Einit, dst=kl.VfsRamFs
{
    grant()
}

execute src=Einit, dst=kl.drivers.RAMDisk
{
    grant()
}

/**
 * This code enables to send requests from RamFs entity to KOS kernel
 * and get responses.
 */
request src=kl.VfsRamFs, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.VfsRamFs
{
    grant()
}

/**
 * This code enables to send requests from RAMDisk driver to KOS kernel
 * and get responses.
 */
request src=kl.drivers.RAMDisk, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.drivers.RAMDisk
{
    grant()
}

/**
 * This code enables to send requests from VfsNet entity
 * to RAMDisk driver and get responses.
 */
request src=kl.VfsNet, dst=kl.drivers.RAMDisk
{
    grant()
}

response src=kl.drivers.RAMDisk, dst=kl.VfsNet
{
    grant()
}

/**
 * This code enables to send requests from VfsRamFs entity
 * to RAMDisk driver and get responses.
 */
request src=kl.VfsRamFs, dst=kl.drivers.RAMDisk
{
    grant()
}

response src=kl.drivers.RAMDisk, dst=kl.VfsRamFs
{
    grant()
}

/**
 * This code enables to send requests from Dhcpcd entity
 * to VfsRamFs entity and get responses.
 */
request src = kl.rump.Dhcpcd, dst = kl.VfsRamFs
{
    grant()
}

response src = kl.VfsRamFs, dst = kl.rump.Dhcpcd
{
    grant()
}

/**
 * This code enables to send requests from TlsEntity
 * entity to VfsRamFs entity and get responses.
 */
request src=kl.TlsEntity, dst=kl.VfsRamFs
{
    grant()
}

response src=kl.VfsRamFs, dst=kl.TlsEntity
{
    grant()
}

/**
 * This code enables to send requests from CertificateStorageEntity
 * entity to VfsRamFs entity and get responses.
 */
request src=kl.CertificateStorageEntity, dst=kl.VfsRamFs
{
    grant()
}

response src=kl.CertificateStorageEntity, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.VfsRamFs, dst=kl.CertificateStorageEntity
{
    grant()
}

response src=kl.VfsRamFs, dst=kl.CertificateStorageEntity
{
    grant()
}

/**
 * This code enables to send requests from ExecMgrEntity
 * entity to VfsRamFs entity and get responses.
 */

response src=execution_manager.ExecMgrEntity, dst=kl.VfsRamFs
{
    grant()
}

request src=execution_manager.ExecMgrEntity, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.VfsRamFs, dst=execution_manager.ExecMgrEntity
{
    grant()
}

response src=kl.VfsRamFs, dst=execution_manager.ExecMgrEntity
{
    grant()
}

/**
 * This code enables to send requests from CertificateStorageEntity 
 * entity to VfsRamFs entity and get responses.
 */
request src=kl.CertificateStorageEntity, dst=kl.VfsRamFs
{
    grant()
}

response src=kl.CertificateStorageEntity, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.VfsRamFs, dst=kl.CertificateStorageEntity
{
    grant()
}

response src=kl.VfsRamFs, dst=kl.CertificateStorageEntity
{
    grant()
}

/**
 * This code enables to send requests from BlobContainerEntity
 * entity to VfsRamFs entity and get responses.
 */
request src=kl.bc.BlobContainer, dst=kl.VfsRamFs
{
    grant()
}

response src=kl.bc.BlobContainer, dst=kl.VfsRamFs
{
    grant()
}

request src=kl.VfsRamFs, dst=kl.bc.BlobContainer
{
    grant()
}

response src=kl.VfsRamFs, dst=kl.bc.BlobContainer
{
    grant()
}
